spec:
  controller:
    logLevel: 1
    wildcardTLS:
      cert: ''
      key: ''
      secret: ''
    customPorts: []
    extraContainers: []
    containerPort:
      http: 80
      https: 443
    initContainers: []
    config:
      annotations: {}
      entries:
        proxy-protocol: 'True'
        real-ip-header: proxy_protocol
        set-real-ip-from: 0.0.0.0/0
    ingressClass:
      create: true
      name: nginx
      setAsDefaultIngress: false
    annotations: {}
    includeYear: false
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
    pod:
      annotations: {}
      extraLabels: {}
    enableCertManager: false
    hostNetwork: false
    watchNamespaceLabel: ''
    affinity: {}
    enableLatencyMetrics: false
    customConfigMap: ''
    hostPort:
      enable: false
      http: 80
      https: 443
    terminationGracePeriodSeconds: 30
    lifecycle: {}
    shareProcessNamespace: false
    name: controller
    nginxStatus:
      allowCidrs: 127.0.0.1
      enable: true
      port: 8080
    watchNamespace: ''
    env: []
    nginxReloadTimeout: 60000
    healthStatus: false
    appprotect:
      enable: false
    minReadySeconds: 0
    readOnlyRootFilesystem: false
    disableIPV6: false
    enableSSLDynamicReload: true
    enableCustomResources: true
    globalConfiguration:
      create: false
      spec: {}
    reportIngressStatus:
      annotations: {}
      enable: true
      enableLeaderElection: true
      ingressLink: nginx-ingress
      leaderElectionLockName: nginx-ingress-leader
    strategy: {}
    nginxplus: true
    volumeMounts: []
    kind: deployment
    initContainerResources:
      requests:
        cpu: 100m
        memory: 128Mi
    service:
      create: true
      externalTrafficPolicy: Cluster
      extraLabels:
        app: ingresslink
      httpPort:
        enable: true
        port: 80
        targetPort: 80
      httpsPort:
        enable: true
        port: 443
        targetPort: 443
      type: ClusterIP
    readyStatus:
      enable: true
      initialDelaySeconds: 0
      port: 8081
    replicaCount: 4
    serviceAccount:
      annotations: {}
      imagePullSecretName: bsmerja-pull
      imagePullSecretsNames: []
    autoscaling:
      annotations: {}
      behavior: {}
      enabled: false
      maxReplicas: 3
      minReplicas: 1
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    volumes: []
    enableSnippets: false
    nginxDebug: false
    appprotectdos:
      debug: false
      enable: false
      maxDaemons: 0
      maxWorkers: 0
      memory: 0
    tlsPassthroughPort: 443
    defaultTLS:
      cert: ''
      key: ''
      secret: ''
    image:
      pullPolicy: IfNotPresent
      repository: bsmerja/nginx-plus-ingress
      tag: 3.5.2
    dnsPolicy: ClusterFirst
    enableExternalDNS: false
    enableTLSPassthrough: false
    tolerations: []
    watchSecretNamespace: ''
    enableOIDC: false
    podDisruptionBudget:
      annotations: {}
      enabled: false
    defaultHTTPListenerPort: 80
    selectorLabels: {}
    healthStatusURI: /nginx-health
    defaultHTTPSListenerPort: 443
  nginxServiceMesh:
    enable: false
    enableEgress: false
  prometheus:
    create: true
    port: 9113
    scheme: http
    secret: ''
    service:
      create: false
      labels:
        service: nginx-ingress-prometheus-service
    serviceMonitor:
      create: false
      endpoints:
        - port: prometheus
      labels: {}
      selectorMatchLabels:
        service: nginx-ingress-prometheus-service
  rbac:
    create: true
  serviceInsight:
    create: false
    port: 9114
    scheme: http
    secret: ''
